opt_out_usage
fastlane_version "2.203.0"
skip_docs

ensure_env_vars(
  env_vars: ["ENVIRONMENT"]
)

VERSIONS = read_json( json_path: "./package.json" )[:versions]
ENVIRONMENT = ENV["ENVIRONMENT"]
VERSION = "#{VERSIONS[:major]}.#{VERSIONS[:minor]}"
RELEASE_CHANNEL = "#{VERSIONS[:major]}.#{VERSIONS[:minor]}-#{ENVIRONMENT}"
BUILD_NUMBER = "#{Time.now.strftime("%y%m%d")}#{ENV["GITHUB_RUN_NUMBER"]}"
GITHUB_REPO = "octospacc/tooot-app"
case ENVIRONMENT
when "candidate"
  GITHUB_RELEASE = "v#{VERSION}-#{VERSIONS[:patch]}"
when "release"
  GITHUB_RELEASE = "v#{VERSION}"
else
  GITHUB_RELEASE= ""
end

XCODEPROJ = "./ios/tooot.xcodeproj"
INFO_PLIST = "./ios/tooot/Info.plist"
EXPO_PLIST = "./ios/tooot/Supporting/Expo.plist"

desc "IOS: Prepare app store"
private_lane :prepare_appstore_ios do
  set_info_plist_value( path: INFO_PLIST, key: "CFBundleShortVersionString", value: VERSION )
  set_info_plist_value(
    path: INFO_PLIST,
    key: "NSAppTransportSecurity",
    value: {}
  )
  increment_build_number( xcodeproj: XCODEPROJ, build_number: BUILD_NUMBER )
  app_store_connect_api_key
end

desc 'IOS: Update expo information'
private_lane :update_expo_ios do
  set_info_plist_value( path: EXPO_PLIST, key: "EXUpdatesSDKVersion", value: VERSIONS[:expo] )
  set_info_plist_value( path: EXPO_PLIST, key: "EXUpdatesReleaseChannel", value: RELEASE_CHANNEL )
end

desc "ANDROID: Prepare play store"
private_lane :prepare_playstore_android do
  android_set_version_name( version_name: VERSION, gradle_file: "./android/app/build.gradle" )
  android_set_version_code( version_code: BUILD_NUMBER, gradle_file: "./android/app/build.gradle" )
end

desc "Create new GitHub release"
private_lane :github_release do |options|
  set_github_release(
    repository_name: GITHUB_REPO,
    name: GITHUB_RELEASE,
    tag_name: GITHUB_RELEASE,
    description: "No changelog provided",
    commitish: git_branch,
    is_prerelease: options[:prerelease],
    upload_assets: ["#{File.expand_path('..', Dir.pwd)}/tooot-#{GITHUB_RELEASE}.apk"]
  )
end

desc "Expo release"
private_lane :expo_release do
end

desc "Build and deploy iOS app"
private_lane :build_ios do
end

desc "Build and deploy Android app"
private_lane :build_android do
end

lane :build do
  releaseExists = get_github_release(url: GITHUB_REPO, version: "v#{VERSION}", api_token: ENV['GH_PAT_GET_RELEASE'])
  if releaseExists
    puts("Release #{GITHUB_RELEASE} exists. Continue with building React Native only.")
  else
    puts("Release #{GITHUB_RELEASE} does not exist. Create new release as well as new native build.")
    cocoapods(clean_install: true, podfile: "./ios/Podfile")
    build_android
    github_release(prerelease: false)
  end
  expo_release
  rocket
end
